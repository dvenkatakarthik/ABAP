*&---------------------------------------------------------------------*
*& SESSION METHOD                                                      *
*& - It is one of the BDC techniques for uploading legacy data into SAP*
*& - The data is transferring from the internal table to database table*
*&   through sessions.                                                 *
*& - Data along with its action is stored in session.                  *
*& - When the program has finished generating the session, you can run *
*&   the session to execute the transaction.                           *
*& - Unless session is processed, the data is not transferred to       *
*&   database tables.                                                  *
*& - The following Function Modules are used in the session method.    *
*&   1. BDC_OPEN_GROUP  (Used to create the session)                   *
*&      Import Parameters :                                            *
*&      USER - User Name                                               *
*&      CLIENT - Client                                                *
*&      GROUP - Name of the session                                    *
*&      HOLD - The date when you want to process the session           *
*&      KEEP - ‘X’ – retain session even after processing it           *
*&             ' ' - Delete the session after processing.              *
*&                                                                     *
*&   2. BDC_INSERT  (Data is transferred to session)                   *
*&      Import Parameters :                                            *
*&      TCODE - Transaction code                                       *
*&      DYNPROTAB – BDCDATA table                                      *
*&                                                                     *
*&   3. BDC_CLOSE_GROUP  (Used to close a session)                     *
*&                                                                     *
*& - Processing Steps                                                  *
*&   1. Generate the batch input session using function module         *
*&      BDC_OPEN_GROUP.                                                *
*&   2. The proceed as follows for each transaction that the session   *
*&      contains:                                                      *
*&      a. In the BDCDATA structure, enter the value for all screens   *
*&         and fields that must be processed in the transaction.       *
*&      b. Use BDC_INSERT to transfer the transaction and the BDCDATA  *
*&         structure to the session.                                   *
*&   3. Close the batch input session with BDC_CLOSE_GROUP.            *
*&   4. Start to process the generated session in T.Code SM35.         *
*&---------------------------------------------------------------------*
REPORT z48_bdc_session_method
       NO STANDARD PAGE HEADING LINE-SIZE 255.

TYPES: BEGIN OF ty_lfa1,
         lifnr TYPE lifnr,
         bukrs TYPE bukrs,
         ekorg TYPE ekorg,
         ktokk TYPE ktokk,
         name1 TYPE name1_gp,
         sortl TYPE sortl,
         land1 TYPE land1_gp,
         akont TYPE akont,
         fdgrv TYPE fdgrv,
        END OF ty_lfa1.

DATA: it_lfa1 TYPE STANDARD TABLE OF ty_lfa1,
      wa_lfa1 TYPE ty_lfa1.

DATA : v_file TYPE string.

DATA: it_bdcdata TYPE TABLE OF bdcdata,
      wa_bdcdata TYPE bdcdata.

DATA: it_bdcmsgcoll TYPE TABLE OF bdcmsgcoll,
      wa_bdcmsgcoll TYPE bdcmsgcoll.

*&---------------------------------------------------------------------*
*&                     SELECTION-SCREEN
*&---------------------------------------------------------------------*
SELECTION-SCREEN BEGIN OF BLOCK bk1 WITH FRAME TITLE text-001.
PARAMETERS : pa_fname TYPE rlgrap-filename OBLIGATORY,
             p_ses TYPE apqi-groupid.
SELECTION-SCREEN END OF BLOCK bk1.
*&---------------------------------------------------------------------*
*&                             AT SELECTION SCREEN
*&---------------------------------------------------------------------*
AT SELECTION-SCREEN ON VALUE-REQUEST FOR pa_fname.
* F4 functionality for File Name
  CALL FUNCTION 'F4_FILENAME'
    EXPORTING
      program_name  = sy-repid
      dynpro_number = sy-dynnr
      field_name    = ' '
    IMPORTING
      file_name     = pa_fname.
*&---------------------------------------------------------------------*
*&                     START-OF-SELECTION
*&---------------------------------------------------------------------*
START-OF-SELECTION.
  v_file = pa_fname.

  CALL FUNCTION 'GUI_UPLOAD'
    EXPORTING
      filename                      = v_file
     filetype                      = 'ASC'
     has_field_separator           = 'X'
*     HEADER_LENGTH                 = 0
*     READ_BY_LINE                  = 'X'
*     DAT_MODE                      = ' '
*     CODEPAGE                      = ' '
*     IGNORE_CERR                   = ABAP_TRUE
*     REPLACEMENT                   = '#'
*     CHECK_BOM                     = ' '
*     VIRUS_SCAN_PROFILE            =
*     NO_AUTH_CHECK                 = ' '
*   IMPORTING
*     FILELENGTH                    =
*     HEADER                        =
    TABLES
      data_tab                      = it_lfa1
   EXCEPTIONS
     file_open_error               = 1
     file_read_error               = 2
     no_batch                      = 3
     gui_refuse_filetransfer       = 4
     invalid_type                  = 5
     no_authority                  = 6
     unknown_error                 = 7
     bad_data_format               = 8
     header_not_allowed            = 9
     separator_not_allowed         = 10
     header_too_long               = 11
     unknown_dp_error              = 12
     access_denied                 = 13
     dp_out_of_memory              = 14
     disk_full                     = 15
     dp_timeout                    = 16
     OTHERS                        = 17
            .
  IF sy-subrc = 0.

*include bdcrecx1.
    CALL FUNCTION 'BDC_OPEN_GROUP'
     EXPORTING
       client                    = sy-mandt
*   DEST                      = FILLER8
       group                     = p_ses                    "'ZABAP48'
*   HOLDDATE                  = FILLER8
       keep                      = 'X'
       user                      = sy-uname
*   RECORD                    = FILLER1
*   PROG                      = SY-CPROG
*   DCPFM                     = '%'
*   DATFM                     = '%'
* IMPORTING
*   QID                       =
     EXCEPTIONS
       client_invalid            = 1
       destination_invalid       = 2
       group_invalid             = 3
       group_is_locked           = 4
       holddate_invalid          = 5
       internal_error            = 6
       queue_error               = 7
       running                   = 8
       system_lock_error         = 9
       user_invalid              = 10
       OTHERS                    = 11
              .
    IF sy-subrc <> 0.
      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
              WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    ELSE.

      LOOP AT it_lfa1 INTO wa_lfa1.

        REFRESH it_bdcdata.

        PERFORM bdc_dynpro      USING 'SAPMF02K' '0100'.
        PERFORM bdc_field       USING 'BDC_CURSOR'
                                      'RF02K-KTOKK'.
        PERFORM bdc_field       USING 'BDC_OKCODE'
                                      '/00'.
        PERFORM bdc_field       USING 'RF02K-LIFNR'
                                      wa_lfa1-lifnr.        "'76543'.
        PERFORM bdc_field       USING 'RF02K-BUKRS'
                                      wa_lfa1-bukrs.        "'1000'.
        PERFORM bdc_field       USING 'RF02K-EKORG'
                                      wa_lfa1-ekorg.        "'1000'.
        PERFORM bdc_field       USING 'RF02K-KTOKK'
                                      wa_lfa1-ktokk.        "'0001'.
        PERFORM bdc_dynpro      USING 'SAPMF02K' '0110'.
        PERFORM bdc_field       USING 'BDC_CURSOR'
                                      'LFA1-NAME3'.
        PERFORM bdc_field       USING 'BDC_OKCODE'
                                      '=VW'.
        PERFORM bdc_field       USING 'LFA1-NAME1'
                                      wa_lfa1-name1. "'BDC VENDOR'.
        PERFORM bdc_field       USING 'LFA1-SORTL'
                                      wa_lfa1-sortl. "'BDC'.
        PERFORM bdc_field       USING 'LFA1-LAND1'
                                      wa_lfa1-land1. "'IN'.
        PERFORM bdc_dynpro      USING 'SAPMF02K' '0120'.
        PERFORM bdc_field       USING 'BDC_CURSOR'
                                      'LFA1-STCD3'.
        PERFORM bdc_field       USING 'BDC_OKCODE'
                                      '=VW'.
        PERFORM bdc_dynpro      USING 'SAPMF02K' '0130'.
        PERFORM bdc_field       USING 'BDC_CURSOR'
                                      'LFBK-BANKL(04)'.
        PERFORM bdc_field       USING 'BDC_OKCODE'
                                      '=VW'.
        PERFORM bdc_dynpro      USING 'SAPMF02K' '0380'.
        PERFORM bdc_field       USING 'BDC_CURSOR'
                                      'KNVK-ANRED(01)'.
        PERFORM bdc_field       USING 'BDC_OKCODE'
                                      '=VW'.
        PERFORM bdc_dynpro      USING 'SAPMF02K' '0210'.
        PERFORM bdc_field       USING 'BDC_CURSOR'
                                      'LFB1-LNRZE'.
        PERFORM bdc_field       USING 'BDC_OKCODE'
                                      '=VW'.
        PERFORM bdc_field       USING 'LFB1-AKONT'
                                      wa_lfa1-akont.        "'196300'.
        PERFORM bdc_field       USING 'LFB1-FDGRV'
                                      wa_lfa1-fdgrv.        "'A1'.
        PERFORM bdc_dynpro      USING 'SAPMF02K' '0215'.
        PERFORM bdc_field       USING 'BDC_CURSOR'
                                      'LFB1-ZWELS'.
        PERFORM bdc_field       USING 'BDC_OKCODE'
                                      '=VW'.
        PERFORM bdc_dynpro      USING 'SAPMF02K' '0220'.
        PERFORM bdc_field       USING 'BDC_CURSOR'
                                      'LFB5-MAHNA'.
        PERFORM bdc_field       USING 'BDC_OKCODE'
                                      '=VW'.
        PERFORM bdc_dynpro      USING 'SAPMF02K' '0310'.
        PERFORM bdc_field       USING 'BDC_CURSOR'
                                      'LFM1-WAERS'.
        PERFORM bdc_field       USING 'BDC_OKCODE'
                                      '=VW'.
        PERFORM bdc_field       USING 'LFM1-WAERS'
                                      'inr'.
        PERFORM bdc_dynpro      USING 'SAPMF02K' '0320'.
        PERFORM bdc_field       USING 'BDC_CURSOR'
                                      'RF02K-LIFNR'.
        PERFORM bdc_field       USING 'BDC_OKCODE'
                                      '=VW'.
        CALL FUNCTION 'BDC_INSERT'
 EXPORTING
   tcode                  = 'XK01'
*   POST_LOCAL             = NOVBLOCAL
*   PRINTING               = NOPRINT
*   SIMUBATCH              = ' '
*   CTUPARAMS              = ' '
          TABLES
            dynprotab              = it_bdcdata
         EXCEPTIONS
           internal_error         = 1
           not_open               = 2
           queue_error            = 3
           tcode_invalid          = 4
           printing_invalid       = 5
           posting_invalid        = 6
           OTHERS                 = 7
                  .
        IF sy-subrc <> 0.
          MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
                  WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
        ENDIF.

      ENDLOOP.

      CALL FUNCTION 'BDC_CLOSE_GROUP'
        EXCEPTIONS
          not_open    = 1
          queue_error = 2
          OTHERS      = 3.
      IF sy-subrc = 0.
        MESSAGE s000(z48_abap) WITH 'Session' p_ses 'created at SM35'.
      ENDIF.

    ENDIF.

  ENDIF.


*----------------------------------------------------------------------*
*        Start new screen                                              *
*----------------------------------------------------------------------*
FORM bdc_dynpro USING program dynpro.
  CLEAR wa_bdcdata.
  wa_bdcdata-program  = program.
  wa_bdcdata-dynpro   = dynpro.
  wa_bdcdata-dynbegin = 'X'.
  APPEND wa_bdcdata TO it_bdcdata.
ENDFORM.                    "bdc_dynpro

*----------------------------------------------------------------------*
*        Insert field                                                  *
*----------------------------------------------------------------------*
FORM bdc_field USING fnam fval.

  CLEAR wa_bdcdata.
  wa_bdcdata-fnam = fnam.
  wa_bdcdata-fval = fval.
  APPEND wa_bdcdata TO it_bdcdata.
ENDFORM.                    "bdc_field
